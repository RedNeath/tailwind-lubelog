@using System.Net
@using System.Text.Json
@using CarCareTracker.Helper
@inject IConfigHelper config
@inject ITranslationHelper translator
@inject HttpClient httpClient
@model string
@{
    var userLanguage = config.GetServerLanguage();
    var registrationDisabled = config.GetServerDisabledRegistration();
    var openIdConfigName = config.GetOpenIDConfig().Name;
    string? unsplashRandomImageUrl = null;
    string? unsplashRandomImageAuthor = null;
    string? unsplashRandomImageAuthorLink = null;
    string? unsplashRandomImageAuthorReferralLink = null;

    if (!string.IsNullOrWhiteSpace(config.GetUnsplashAccessKey()))
    {
        var unsplashImage = await GetImageFromUnsplash();
        unsplashRandomImageUrl = unsplashImage["randomImageUrl"];
        unsplashRandomImageAuthor = unsplashImage["randomImageAuthor"];
        unsplashRandomImageAuthorLink = unsplashImage["randomImageAuthorLink"];
        unsplashRandomImageAuthorReferralLink = unsplashImage["randomImageAuthorReferralLink"];
    }

    async Task<Dictionary<string, string?>> GetImageFromUnsplash()
    {
        var output = new Dictionary<string, string?>();
        output.Add("randomImageUrl", null);
        output.Add("randomImageAuthor", null);
        output.Add("randomImageAuthorLink", null);
        output.Add("randomImageAuthorReferralLink", null);
        
        var response = await httpClient.GetAsync("https://api.unsplash.com/photos/random?collections=1075017&client_id=" + config.GetUnsplashAccessKey());
        if (response.StatusCode != HttpStatusCode.OK)
        {
            return output;
        }
        
        var json = await response.Content.ReadAsStringAsync();
        var dictionary = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(json);
        var urls = JsonSerializer.Deserialize<Dictionary<string, string>>(dictionary["urls"]);
        var user = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(dictionary["user"]);
        var links = JsonSerializer.Deserialize<Dictionary<string, string>>(user["links"]);
        
        output["randomImageUrl"] = urls["raw"] + "&auto=format&fit=crop&w=1908&q=80";
        output["randomImageAuthor"] = user["name"].ToString();
        output["randomImageAuthorLink"] = user["portfolio_url"].ToString();
        output["randomImageAuthorReferralLink"] = links["html"] + "?utm_source=tailwind-lubelogger&utm_medium=referral";
        return output;
    }
}
@{
    ViewData["Title"] = "Login";
}
@section Scripts {
    <script src="~/js/login.js?v=@StaticHelper.VersionNumber"></script>
}
<div class="flex flex-1 min-h-screen">
    <div class="flex flex-1 flex-col justify-center px-4 py-12 sm:px-6 lg:flex-none lg:px-20 xl:px-24">
        <div class="mx-auto w-full max-w-96 lg:w-96">
            <div>
                <application-logo class="h-10 w-auto"/>
                <h2 class="mt-8 text-2xl/9 font-bold tracking-tight text-gray-900 dark:text-white">
                    @translator.Translate(userLanguage, "Login")
                </h2>
                
                @if (!registrationDisabled)
                {
                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                        @translator.Translate(userLanguage, "Or")
                        <a href="/Login/Registration" class="font-semibold text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300">
                            @translator.Translate(userLanguage, "Register")
                        </a>
                    </p>
                }
            </div>
            
            <div class="mt-10">
                <form id="loginForm" action="#" method="POST" class="gap-y-6 flex flex-col">
                    <div>
                        <label for="inputUserName" class="block text-sm font-medium text-gray-900 dark:text-gray-100">@translator.Translate(userLanguage, "Username")</label>
                        <input type="text" id="inputUserName" required class="mt-2 block w-full transition-all duration-100 ease-out rounded-md dark:bg-gray-800 border-gray-300 dark:border-gray-600 py-1.5 px-3 text-base text-gray-900 dark:text-white placeholder:text-gray-400 dark:placeholder:text-gray-500 focus:ring-4 focus:outline-none focus:ring-blue-700/25 sm:text-sm/6 dark:focus:ring-blue-600/25">
                    </div>
                    <div>
                        <label for="inputUserPassword" class="block text-sm font-medium text-gray-900 dark:text-gray-100">@translator.Translate(userLanguage, "Password")</label>
                        <div class="mt-2 flex items-center transition-all duration-100 ease-out rounded-md dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-base text-gray-900 dark:text-white placeholder:text-gray-400 dark:placeholder:text-gray-500 has-[input:focus-within]:ring-4 has-[input:focus-within]:outline-none has-[input:focus-within]:ring-blue-700/25 sm:text-sm/6 dark:has-[input:focus-within]:ring-blue-600/25">
                            <input type="password" id="inputUserPassword" required onkeyup="callBackOnEnter(event, performLogin)" class="block min-w-0 rounded-l-md bg-transparent grow py-1.5 px-3 text-base text-gray-900 dark:text-white border-0 border-r border-gray-300 dark:border-gray-600 outline-none sm:text-sm/6">
                            <div class="grid rounded-r-md shrink-0 grid-cols-1 focus-within:relative bg-white dark:bg-gray-800">
                                <button type="button" onclick="twTogglePasswordVisibility(this)" class="col-start-1 row-start-1 w-full appearance-none rounded-r-md py-2 px-3 text-base text-gray-500 transition-all duration-100 ease-out shadow-xs focus:outline focus:outline-1 focus:ring-4 focus:ring-offset-1 focus:ring-offset-transparent focus:ring-blue-700/25 dark:focus:ring-blue-600/25">
                                    <heroicon id="userPasswordHidden" kind="Outline" name="Eye" class="size-5" />
                                    <heroicon id="userPasswordVisible" kind="Outline" name="EyeSlash" class="hidden size-5" />
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center justify-between">
                        <div class="flex gap-3 items-center">
                            <div class="flex h-6 shrink-0 items-center">
                                <div class="group grid size-4 grid-cols-1">
                                    <input type="checkbox" id="inputPersistent" class="col-start-1 row-start-1 appearance-none rounded border border-gray-300 bg-white dark:bg-gray-800 checked:border-blue-600 dark:checked:border-blue-600 checked:bg-blue-600 dark:checked:bg-blue-500 indeterminate:border-blue-600 dark:indeterminate:border-blue-500 indeterminate:bg-blue-600 dark:indeterminate:bg-blue-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 dark:focus-visible:outline-blue-500 dark:border-gray-600">
                                    <heroicon kind="Micro" name="Check" class="pointer-events-none col-start-1 row-start-1 s-3.5 self-center justify-self-center text-white" fill="none"/>
                                </div>
                            </div>
                            <label class="block text-sm text-gray-900 dark:text-gray-300" for="inputPersistent">@translator.Translate(userLanguage, "Remember Me")</label>
                        </div>
                        <div class="text-sm">
                            <a href="/Login/ForgotPassword" class="font-semibold text-blue-600 dark:text-blue-400 hover:text-blue-500 dark:hover:text-blue-300">@translator.Translate(userLanguage, "Forgot Password")</a>
                        </div>
                    </div>
                    <div>
                        <button type="button" onclick="performLogin()" class="inline-flex w-full justify-center rounded-md transition-all duration-100 ease-out bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-xs hover:bg-blue-500 focus:ring-4 focus:outline-none focus:ring-blue-700/25 dark:focus:ring-blue-600/25">
                            <heroicon kind="Outline" name="ArrowRightEndOnRectangle" class="size-5 mr-1.5"/>
                            @translator.Translate(userLanguage, "Login")
                        </button>
                        <div class="text-center">
                            <small class="text-gray-500">@config.GetMOTD()</small>
                        </div>
                    </div>
                </form>
                
                @if (!string.IsNullOrWhiteSpace(openIdConfigName))
                {
                    <div class="mt-10">
                        <div class="relative">
                            <div aria-hidden="true" class="absolute inset-0 flex items-center">
                                <div class="w-full border-b border-gray-300 dark:border-gray-600"></div>
                            </div>
                            <div class="relative flex justify-center text-sm font-medium">
                                <span class="bg-white px-6 text-gray-900 dark:bg-gray-900 dark:text-gray-300">@translator.Translate(userLanguage, "Login via")</span>
                            </div>
                        </div>
                        <div class="mt-6 grid grid-cols-1 gap-4">
                            <button type="button" onclick="remoteLogin()" class="inline-flex w-full justify-center rounded-md border border-gray-300 transition-all duration-100 ease-out px-3 py-2 text-sm font-semibold shadow-xs focus:ring-4 focus:outline-none text-gray-400 dark:text-gray-500 inset-ring-gray-300 dark:inset-ring-white/5 hover:text-gray-700 hover:border-gray-500 dark:hover:text-gray-400 focus:ring-gray-900/5 dark:focus:ring-white/5 dark:border-gray-700 dark:hover:border-gray-500 dark:bg-gray-800">
                                <heroicon kind="Outline" name="ArrowRightEndOnRectangle" class="size-5 mr-1.5"/>
                                @openIdConfigName
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="relative hidden w-0 flex-1 lg:block">
        @if (string.IsNullOrWhiteSpace(unsplashRandomImageUrl))
        {
            <img class="absolute inset-0 size-full object-cover" src="https://images.unsplash.com/photo-1530575556081-545349eddfce?ixid=M3w3OTg1MTl8MHwxfGFsbHx8fHx8fHx8fDE3NTY1NzM4MjZ8&ixlib=rb-4.1.0&auto=format&fit=crop&w=1908&q=80"/>
            <div class="flex flex-col justify-center gap-y-2 absolute bottom-4 right-4 p-3 text-sm transition-all duration-200 ease-out rounded-lg text-gray-300 hover:bg-white/5">
                <span class="text-end">
                    <i>@translator.Translate(userLanguage, "Image by")</i>
                    <a href="https://www.jonathangallegos.com/" class="font-medium transition-all duration-200 ease-out hover:text-gray-100">Jonathan Gallegos</a>
                </span>
                <a class="text-end text-xs" href="https://unsplash.com/@("@jonathangallegos")?utm_source=tailwind-lubelogger&utm_medium=referral">@translator.Translate(userLanguage, "Check out photographer")</a>
                <a href="https://unsplash.com?utm_source=tailwind-lubelogger&utm_medium=referral"><img src="~/defaults/Unsplash_Logo_Full.svg" class="h-4 ml-auto"/></a>
            </div>
        }
        else
        {
            <img class="absolute inset-0 size-full object-cover" src="@unsplashRandomImageUrl" />
            <div class="flex flex-col justify-center gap-y-2 absolute bottom-4 right-4 p-3 text-sm transition-all duration-200 ease-out rounded-lg text-gray-300 hover:bg-white/5">
                <span class="text-end">
                    <i>@translator.Translate(userLanguage, "Photo by")</i>
                    <a href="@unsplashRandomImageAuthorLink" class="font-medium transition-all duration-200 ease-out hover:text-gray-100">@unsplashRandomImageAuthor</a>
                </span>
                <a class="text-end text-xs" href="@unsplashRandomImageAuthorReferralLink">@translator.Translate(userLanguage, "Check out photographer")</a>
                <a href="https://unsplash.com/?utm_source=tailwind-lubelogger&utm_medium=referral"><img src="~/defaults/Unsplash_Logo_Full.svg" class="h-4 ml-auto"/></a>
            </div>
        }
    </div>
</div>
<script>
    function getRedirectURL() {
        return { url: decodeHTMLEntities('@Model') };
    }
</script>